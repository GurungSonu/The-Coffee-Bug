const pool = require('../db');


const createCombinedOrder = (req, res) => {
  const { userID } = req.body;
  if (!userID) return res.status(400).json({ message: 'UserID is required' });

  console.log("ðŸš€ Starting createCombinedOrder for user:", userID);

  const fetchMainCartQuery = `SELECT ProductID, Quantity, LineTotal FROM MainCartItem WHERE UserID = ? AND CartStatus = 'active'`;
  const fetchCustomCartQuery = `SELECT CustomProductID, Quantity, LineTotal FROM CustomCartItem WHERE UserID = ? AND CartStatus = 'active'`;

  pool.query(fetchMainCartQuery, [userID], (err, mainCartItems) => {
    if (err) return res.status(500).json({ message: 'Error fetching main cart items' });

    pool.query(fetchCustomCartQuery, [userID], (err, customCartItems) => {
      if (err) return res.status(500).json({ message: 'Error fetching custom cart items' });

      if (mainCartItems.length === 0 && customCartItems.length === 0) {
        return res.status(400).json({ message: 'No items in cart to checkout' });
      }

      const mainOrderTotal = mainCartItems.reduce((sum, item) => sum + parseFloat(item.LineTotal), 0);
      const customOrderTotal = customCartItems.reduce((sum, item) => sum + parseFloat(item.LineTotal), 0);

      const insertMainOrder = `
        INSERT INTO MainOrders (OrderDate, OrderStatus, OrderTotalAmount, UserID)
        VALUES (NOW(), 'Pending', ?, ?)
      `;

      pool.query(insertMainOrder, [mainOrderTotal, userID], (err, mainResult) => {
        if (err) return res.status(500).json({ message: 'Error creating main order' });

        const mainOrderID = mainResult.insertId;
        const insertMainOrderItemsQuery = `
          INSERT INTO MainOrderItem (OrderedItemQuantity, LineTotal, MainOrderID, ProductID)
          VALUES ?
        `;
        const mainValues = mainCartItems.map(item => [
          item.Quantity, item.LineTotal, mainOrderID, item.ProductID
        ]);

        const insertMainOrderItems = (cb) => {
          if (mainCartItems.length === 0) return cb();
          pool.query(insertMainOrderItemsQuery, [mainValues], (err) => {
            if (err) return res.status(500).json({ message: 'Error inserting main order items' });
            cb();
          });
        };

        const insertCustomOrder = () => {
          const insertCustomOrderQuery = `
            INSERT INTO CustomOrders (UserID, OrderDate, TotalPrice, Status)
            VALUES (?, NOW(), ?, 'Pending')
          `;
          pool.query(insertCustomOrderQuery, [userID, customOrderTotal], (err, customResult) => {
            if (err) return res.status(500).json({ message: 'Error creating custom order' });

            const customOrderID = customResult.insertId;
            const insertCustomOrderItemsQuery = `
            INSERT INTO CustomOrderItems (CustomOrderID, CustomProductID, Quantity, Subtotal)
            VALUES ?
          `;
          
          const customValues = customCartItems.map(item => [
            customOrderID, item.CustomProductID, item.Quantity, item.LineTotal // LineTotal maps to Subtotal
          ]);
          
            if (customCartItems.length === 0) return finalizeOrder(mainOrderID, customOrderID);

            console.log("ðŸ“¦ customValues:", customValues);

            pool.query(insertCustomOrderItemsQuery, [customValues], (err) => {
              if (err) {
                console.error("ðŸ’¥ INSERT FAIL:", err.sqlMessage || err.message);
                return res.status(500).json({ message: 'Error inserting custom order items' });
              }
              finalizeOrder(mainOrderID, customOrderID);
            });
          });
        };

        const finalizeOrder = (mainOrderID, customOrderID) => {
            console.log("ðŸ§¾ Finalizing Order");
  console.log("MainOrderID:", mainOrderID);
  console.log("CustomOrderID:", customOrderID);
          const insertMasterQuery = `
            INSERT INTO MasterOrder (MainOrderID, CustomOrderID, Status, OrderDate)
            VALUES (?, ?, 'Pending', NOW())
          `;
          pool.query(insertMasterQuery, [mainOrderID, customOrderID], (err) => {
            if (err) return res.status(500).json({ message: 'Error inserting master order' });

            const clearMainQuery = `DELETE FROM MainCartItem WHERE UserID = ?`;
            const clearCustomQuery = `DELETE FROM CustomCartItem WHERE UserID = ?`;

            pool.query(clearMainQuery, [userID], (err) => {
              if (err) return res.status(500).json({ message: 'Error clearing main cart' });

              pool.query(clearCustomQuery, [userID], (err) => {
                if (err) return res.status(500).json({ message: 'Error clearing custom cart' });

                return res.status(201).json({
                  message: 'Order placed successfully',
                  mainOrderID,
                  customOrderID,
                  totalAmount: mainOrderTotal + customOrderTotal
                });
              });
            });
          });
        };

        insertMainOrderItems(() => insertCustomOrder());
      });
    });
  });
};

// âœ… Get all master orders for a user
const getMasterOrdersByUser = (req, res) => {
    const { userID } = req.params;
  
    const query = `
      SELECT mo.MasterOrderID, mo.Status AS MasterStatus, mo.OrderDate,
             m.OrderTotalAmount AS MainTotal,
             c.TotalPrice AS CustomTotal
      FROM MasterOrder mo
      LEFT JOIN MainOrders m ON mo.MainOrderID = m.MainOrderID
      LEFT JOIN CustomOrders c ON mo.CustomOrderID = c.CustomOrderID
      WHERE m.UserID = ? OR c.UserID = ?
      ORDER BY mo.OrderDate DESC
    `;
  
    pool.query(query, [userID, userID], (err, results) => {
      if (err) {
        console.error("Error fetching master orders:", err);
        return res.status(500).json({ message: "Database error fetching master orders" });
      }
      res.status(200).json(results);
    });
  };
  
  // âœ… Get details of a single master order (products + custom drinks)
  const getMasterOrderDetails = (req, res) => {
    const { masterOrderID } = req.params;
  
    const getMasterQuery = `SELECT * FROM MasterOrder WHERE MasterOrderID = ?`;
  
    pool.query(getMasterQuery, [masterOrderID], (err, masterResult) => {
      if (err || masterResult.length === 0) {
        return res.status(500).json({ message: "Error fetching master order" });
      }
  
      const mainOrderID = masterResult[0].MainOrderID;
      const customOrderID = masterResult[0].CustomOrderID;
  
      const mainQuery = `
        SELECT m.OrderedItemQuantity, m.LineTotal, p.ProductName
        FROM MainOrderItem m
        JOIN Products p ON m.ProductID = p.ProductID
        WHERE m.MainOrderID = ?
      `;
  
      pool.query(mainQuery, [mainOrderID], (err, mainItems) => {
        if (err) return res.status(500).json({ message: 'Error fetching main order items' });
  
        const customQuery = `
          SELECT coi.Quantity, coi.Subtotal, cp.ProductName
          FROM CustomOrderItems coi
          JOIN CustomProduct cp ON coi.CustomProductID = cp.CustomProductID
          WHERE coi.CustomOrderID = ?
        `;
  
        pool.query(customQuery, [customOrderID], (err, customItems) => {
          if (err) return res.status(500).json({ message: 'Error fetching custom order items' });
  
          return res.status(200).json({
            masterOrderID,
            mainItems,
            customItems
          });
        });
      });
    });
  };

module.exports = { 
    createCombinedOrder,
    getMasterOrdersByUser,
    getMasterOrderDetails,
 };
